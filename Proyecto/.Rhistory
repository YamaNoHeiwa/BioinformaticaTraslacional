theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 7),
axis.title.x = element_blank(),
legend.title = element_blank()) +
labs(title = "Distribución de Expresión Génica por Muestra",
y = "Expresión",
x = "Muestra") +
scale_fill_brewer(palette = "Dark2")  # Usar una paleta de colores predefinida
# Mostrar el plot
print(p)
# Asumiendo que 'expresion_leukemia' es una matriz con genes como filas y muestras como columnas
heatmap.2(as.matrix(expresion_leukemia),
scale = "row",
Colv = NA,
dendrogram = "row",
trace = "none",
col = colorRampPalette(c("blue", "white", "red"))(255),
margin = c(10, 10))
data(leukemiasEset)
es <- leukemiasEset[, leukemiasEset$LeukemiaType %in% c("AML", "CML", "NoL")]
# Numero de expediente: 1637826 utilizado para la semilla
es$LeukemiaType
set.seed(1637826)
es <- es[, sample(1:ncol(es), 30)]
expresion_leukemia = exprs(es)
ncol(expresion_leukemia)
# Obtenemos los identificadores de Ensembl de los genes
gene_ids <- rownames(es)
# Mapeamos a símbolos de genes usando org.Hs.eg.db
gene_symbols <- mapIds(org.Hs.eg.db, keys = gene_ids, column = "SYMBOL", keytype = "ENSEMBL")
# Reemplazar los identificadores de Ensembl por símbolos de genes en los datos de expresión
rownames(expresion_leukemia) <- gene_symbols
head(expresion_leukemia)
# Reemplazar los identificadores de Ensembl por símbolos de genes en los datos de expresión
rownames(expresion_leukemia) <- gene_symbols
data(leukemiasEset)
es <- leukemiasEset[, leukemiasEset$LeukemiaType %in% c("AML", "CML", "NoL")]
# Numero de expediente: 1637826 utilizado para la semilla
es$LeukemiaType
set.seed(1637826)
es <- es[, sample(1:ncol(es), 30)]
expresion_leukemia = exprs(es)
ncol(expresion_leukemia)
# Obtenemos los identificadores de Ensembl de los genes
gene_ids <- rownames(es)
# Mapeamos a símbolos de genes usando org.Hs.eg.db
gene_symbols <- mapIds(org.Hs.eg.db, keys = gene_ids, column = "SYMBOL", keytype = "ENSEMBL")
library(org.Hs.eg.db)
library(AnnotationDbi)
library(leukemiasEset)
library(Biobase)
library(ggplot2)
library(limma)
library(clusterProfiler)
library(reshape2)
library(arrayQualityMetrics)
library(gplots)
library(arrayQualityMetrics)
data(leukemiasEset)
es <- leukemiasEset[, leukemiasEset$LeukemiaType %in% c("AML", "CML", "NoL")]
# Numero de expediente: 1637826 utilizado para la semilla
es$LeukemiaType
set.seed(1637826)
es <- es[, sample(1:ncol(es), 30)]
expresion_leukemia = exprs(es)
ncol(expresion_leukemia)
# Obtenemos los identificadores de Ensembl de los genes
gene_ids <- rownames(es)
# Mapeamos a símbolos de genes usando org.Hs.eg.db
gene_symbols <- mapIds(org.Hs.eg.db, keys = gene_ids, column = "SYMBOL", keytype = "ENSEMBL")
# Reemplazar los identificadores de Ensembl por símbolos de genes en los datos de expresión
rownames(expresion_leukemia) <- gene_symbols
head(expresion_leukemia)
es$LeukemiaType
# Crear la matriz de diseño
es$LeukemiaType
design <- model.matrix(~ 0 + es$LeukemiaType)
colnames(design) <- levels(es$LeukemiaType)
design
# Crear la matriz de diseño
es$LeukemiaType
design <- model.matrix(~ 0 + es$LeukemiaType)
colnames(design) <- c("AML", "CML", "NoL")
# Crear la matriz de diseño
es$LeukemiaType
es_subsampled$LeukemiaType <- factor(es_subsampled$LeukemiaType, levels = c("AML", "CML", "NoL"))
# Crear la matriz de diseño
es$LeukemiaType
data(leukemiasEset)
es <- leukemiasEset[, leukemiasEset$LeukemiaType %in% c("AML", "CML", "NoL")]
# Numero de expediente: 1637826 utilizado para la semilla
es$LeukemiaType
es$LeukemiaType <- factor(es$LeukemiaType, levels = c("AML", "CML", "NoL"))
es$LeukemiaType
data(leukemiasEset)
es$LeukemiaType <- factor(es$LeukemiaType, levels = c("AML", "CML", "NoL"))
es$LeukemiaType
# Crear la matriz de diseño
design <- model.matrix(~ 0 + es$LeukemiaType)
colnames(design) <- levels(es$LeukemiaType)
design
design
contrasts
contrasts
# Crear la matriz de contrastes para comparar los grupos e identificar genes
# diferencialmente expresados en los tres grupos.
contrasts <- makeContrasts(
AMLvsCML = AML - CML,
AMLvsNoL = AML - NoL,
CMLvsNoL = CML - NoL,
levels = design
)
contrasts
# Ajustar el modelo lineal usando limma
fit <- lmFit(es_subsampled, design)
# Ajustar el modelo lineal usando limma
fit <- lmFit(es, design)
# Aplicar los contrastes
fit2 <- contrasts.fit(fit, contrasts)
fit2 <- eBayes(fit2)
# Obtener los resultados para cada contraste
aml_vs_cml <- topTable(fit2, coef = "AMLvsCML", number = Inf)
aml_vs_nol <- topTable(fit2, coef = "AMLvsNoL", number = Inf)
cml_vs_nol <- topTable(fit2, coef = "CMLvsNoL", number = Inf)
# Verificar los resultados
head(aml_vs_cml)
head(aml_vs_nol)
head(cml_vs_nol)
# Verificar los resultados
head(aml_vs_cml)
# Comprobamos
head(aml_vs_cml)
head(aml_vs_nol)
head(cml_vs_nol)
cmls_aml = topTable(fit2, coef = "CMLvsAML", number = Inf)
# Anotación
gene_list <- results$ENTREZID
# Comprobamos
head(aml_vs_cml)
head(aml_vs_nol)
head(cml_vs_nol)
# Anotación
# Lista de genes a anotar
gene_ids <- rownames(aml_vs_cml)
rownames(aml_vs_cml)
aml_vs_cml
# Función para anotar genes con Symbol y EntrezID
annotate_genes <- function(results) {
gene_ids <- rownames(results)
symbols <- mapIds(org.Hs.eg.db, keys = gene_ids, column = "SYMBOL", keytype = "ENSEMBL", multiVals = "first")
entrez_ids <- mapIds(org.Hs.eg.db, keys = gene_ids, column = "ENTREZID", keytype = "ENSEMBL", multiVals = "first")
results$Symbol <- symbols
results$EntrezID <- entrez_ids
return(results)
}
# Anotar los genes relevantes de CML vs NoL
cml_vs_nol_annotated <- annotate_genes(head(cml_vs_nol))
# Verificar los resultados anotados
print(cml_vs_nol_annotated)
# Anotar los genes relevantes de CML vs NoL
cml_vs_nol_annotated <- annotate_genes(cml_vs_nol)
# Verificar los resultados anotados
print(cml_vs_nol_annotated)
# Verificar los resultados anotados
print(head(cml_vs_nol_annotated))
# Verificar los resultados anotados
print(cml_vs_nol_annotated)
aml_vs_cml_annotated <- annotate_genes(aml_vs_cml)
aml_vs_nol_annotated <- annotate_genes(aml_vs_nol)
cml_vs_nol_annotated <- annotate_genes(cml_vs_nol)
# Verificar los resultados anotados
head(aml_vs_cml_annotated)
head(aml_vs_nol_annotated)
head(cml_vs_nol_annotated)
# Verificar los resultados anotados
head(aml_vs_cml_annotated)
library(AnnotationDbi)
# Función para obtener la función de los genes
get_gene_function <- function(gene_symbols) {
gene_functions <- mapIds(org.Hs.eg.db, keys = gene_symbols, column = "GO", keytype = "SYMBOL", multiVals = "first")
gene_functions <- sapply(gene_functions, function(x) {
if (is.na(x)) {
return("No function available")
} else {
return(Term(GOTERM[[x]]))
}
})
return(gene_functions)
}
# Ejemplo con los genes anotados de CML vs NoL
gene_symbols <- cml_vs_nol_annotated$Symbol
gene_functions <- get_gene_function(gene_symbols)
# Ejemplo con los genes anotados de CML vs NoL
gene_symbols <- cml_vs_nol_annotated$Symbol
gene_functions <- get_gene_function(gene_symbols)
gene_
gene_symbols
gene_functions <- get_gene_function(gene_symbols)
# Función para obtener la función de los genes
get_gene_function <- function(gene_symbols) {
gene_functions <- mapIds(org.Hs.eg.db, keys = gene_symbols, column = "GO", keytype = "SYMBOL", multiVals = "first")
gene_functions <- sapply(gene_functions, function(x) {
if (is.na(x)) {
return("No function available")
} else if (length(x) > 1) {
return(paste(unique(sapply(x, function(go_id) Term(GOTERM[[go_id]]))), collapse = "; "))
} else {
return(Term(GOTERM[[x]]))
}
})
return(gene_functions)
}
# Anotar todos los genes relevantes de CML vs NoL
cml_vs_nol_annotated <- annotate_genes(cml_vs_nol)
# Obtener los símbolos de los genes anotados
gene_symbols <- cml_vs_nol_annotated$Symbol
# Obtener las funciones de los genes
gene_functions <- get_gene_function(gene_symbols)
BiocManager::install("GO.db")
library(GO.db)
# Función para obtener la función de los genes
get_gene_function <- function(gene_symbols) {
gene_functions <- mapIds(org.Hs.eg.db, keys = gene_symbols, column = "GO", keytype = "SYMBOL", multiVals = "first")
gene_functions <- sapply(gene_functions, function(x) {
if (is.na(x)) {
return("No function available")
} else if (length(x) > 1) {
return(paste(unique(sapply(x, function(go_id) Term(GOTERM[[go_id]]))), collapse = "; "))
} else {
return(Term(GOTERM[[x]]))
}
})
return(gene_functions)
}
# Anotar todos los genes relevantes de CML vs NoL
cml_vs_nol_annotated <- annotate_genes(cml_vs_nol)
# Obtener los símbolos de los genes anotados
gene_symbols <- cml_vs_nol_annotated$Symbol
# Obtener las funciones de los genes
gene_functions <- get_gene_function(gene_symbols)
# Crear una tabla con los nombres de los genes y sus funciones
gene_function_table <- data.frame(Gene = gene_symbols, Function = gene_functions)
# Obtener las funciones de los genes
gene_functions <- get_gene_function(gene_symbols)
# Función para obtener la función de los genes
get_gene_function <- function(gene_symbols) {
gene_functions <- mapIds(org.Hs.eg.db, keys = gene_symbols, column = "GO", keytype = "SYMBOL", multiVals = "first")
gene_functions <- sapply(gene_functions, function(x) {
if (is.na(x)) {
return("No function available")
} else if (length(x) > 1) {
return(paste(unique(sapply(x, function(go_id) Term(GOTERM[[go_id]]))), collapse = "; "))
} else {
return(Term(GOTERM[[x]]))
}
})
return(gene_functions)
}
# Anotar todos los genes relevantes de CML vs NoL
cml_vs_nol_annotated <- annotate_genes(cml_vs_nol)
# Obtener los símbolos de los genes anotados
gene_symbols <- cml_vs_nol_annotated$Symbol
# Obtener las funciones de los genes
gene_functions <- get_gene_function(gene_symbols)
# Anotar todos los genes relevantes de CML vs NoL
cml_vs_nol_annotated <- annotate_genes(cml_vs_nol)
# Obtener los símbolos de los genes anotados
gene_symbols <- cml_vs_nol_annotated$Symbol
gene_symbols
# Obtener las funciones de los genes
gene_functions <- get_gene_function(gene_symbols)
# Obtener las funciones de los genes
gene_functions <- get_gene_function(head(gene_symbols))
# Crear una tabla con los nombres de los genes y sus funciones
gene_function_table <- data.frame(Gene = gene_symbols, Function = gene_functions)
# Verificar la tabla con los nombres de los genes y sus funciones
head(gene_function_table)
# Crear una tabla con los nombres de los genes y sus funciones
gene_function_table <- data.frame(Gene = gene_symbols, Function = gene_functions)
# Verificar la tabla con los nombres de los genes y sus funciones
head(gene_function_table)
# Verificar la tabla con los nombres de los genes y sus funciones
gene_function_table
# Crear una tabla con los nombres de los genes y sus funciones
gene_function_table <- data.frame(Gen = gene_symbols, Funcion = gene_functions)
# Verificar la tabla con los nombres de los genes y sus funciones
head(gene_function_table)
# Convertir la lista de genes y funciones en un formato adecuado para clusterProfiler
gene_list <- gene_function_table$Gene[!is.na(gene_function_table$Gene)]
gene_list <- unique(gene_list)  # Eliminar duplicados
# Análisis de sobre-representación (ORA)
ora_results <- enrichGO(gene         = gene_list,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",
ont          = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.2)
# Ver los resultados del ORA
head(ora_results)
gene_list
# Análisis de sobre-representación (ORA)
ora_results <- enrichGO(gene         = gene_symbols,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",
ont          = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.2)
# Ver los resultados del ORA
head(ora_results)
# Preparar los datos para GSEA
gene_list <- cml_vs_nol$logFC
names(gene_list) <- rownames(cml_vs_nol)
gene_list <- sort(gene_list, decreasing = TRUE)
# Análisis GSEA
gsea_results <- gseGO(geneList      = gene_list,
OrgDb         = org.Hs.eg.db,
keyType       = "ENSEMBL",
ont           = "BP",
nPerm         = 1000,
minGSSize     = 10,
maxGSSize     = 500,
pvalueCutoff  = 0.05,
verbose       = FALSE)
# Ver los resultados del GSEA
head(gsea_results)
# Visualizar los resultados de ORA
dotplot(ora_results, showCategory = 20)
# Visualizar los resultados de GSEA
gseaplot(gsea_results, geneSetID = ora_results$ID[1])  # Cambia el ID por el que desees visualizar
shiny::runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
shiny::runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
shiny::runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
# # Instalar y cargar las librerías necesarias
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#
# BiocManager::install("VariantAnnotation")
# BiocManager::install("biomaRt")
# BiocManager::install("Rsamtools")
# install.packages("shiny")
# install.packages("dplyr")
# install.packages("httr")
# install.packages("jsonlite")
# install.packages("DT")
library(VariantAnnotation)
library(biomaRt)
library(Rsamtools)
library(shiny)
library(dplyr)
library(httr)
library(jsonlite)
library(DT)
# Función para buscar información en ClinVar
fetch_clinvar_info <- function(variant_id) {
esearch_url <- paste0("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=clinvar&term=", variant_id, "&retmode=json")
esearch_response <- GET(esearch_url)
if (status_code(esearch_response) == 200) {
esearch_result <- content(esearch_response, "parsed", simplifyVector = TRUE)
if (length(esearch_result$esearchresult$idlist) > 0) {
clinvar_id <- esearch_result$esearchresult$idlist[[1]]
esummary_url <- paste0("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=clinvar&id=", clinvar_id, "&retmode=json")
esummary_response <- GET(esummary_url)
if (status_code(esummary_response) == 200) {
esummary_result <- content(esummary_response, "parsed", simplifyVector = TRUE)
return(esummary_result$result[[as.character(clinvar_id)]])
} else {
return(NULL)
}
} else {
return(NULL)
}
} else {
return(NULL)
}
}
# Asegurarse de que las columnas de ClinVar estén en el formato correcto
extract_clinvar_info <- function(info) {
data.frame(
UID = ifelse(!is.null(info$uid), info$uid, NA),
Object_Type = ifelse(!is.null(info$obj_type), info$obj_type, NA),
Accession = ifelse(!is.null(info$accession), info$accession, NA),
Accession_Version = ifelse(!is.null(info$accession_version), info$accession_version, NA),
Title = ifelse(!is.null(info$title), info$title, NA),
Variation_Name = ifelse(!is.null(info$variation_name), info$variation_name, NA),
cDNA_Change = ifelse(!is.null(info$cdna_change), info$cdna_change, NA),
Variant_Type = ifelse(!is.null(info$variant_type), info$variant_type, NA),
Germline_Description = ifelse(!is.null(info$germline_classification$description), info$germline_classification$description, NA),
Clinical_Impact_Description = ifelse(!is.null(info$clinical_impact_classification$description), info$clinical_impact_classification$description, NA),
Oncogenicity_Description = ifelse(!is.null(info$oncogenicity_classification$description), info$oncogenicity_classification$description, NA),
Gene_Symbol = ifelse(!is.null(info$genes$symbol), info$genes$symbol, NA),
Molecular_Consequence = ifelse(!is.null(info$molecular_consequence_list), paste(info$molecular_consequence_list, collapse = ", "), NA),
Protein_Change = ifelse(!is.null(info$protein_change), info$protein_change, NA),
stringsAsFactors = FALSE
)
}
ui <- fluidPage(
titlePanel("Carga de Variantes y Búsqueda en ClinVar"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Elige un archivo VCF", accept = c(".vcf", ".vcf.gz")),
actionButton("loadData", "Cargar Datos"),
fileInput("bamFile", "Elige un archivo BAM", accept = c(".bam", ".bam.bai")),
actionButton("loadBam", "Cargar BAM")
),
mainPanel(
tabsetPanel(
tabPanel("Tabla de Variantes", DTOutput("variantsTable")),
tabPanel("Información de la Variante", verbatimTextOutput("variantInfo")),
tabPanel("Buscar en Google Scholar", uiOutput("externalLink")),
tabPanel("Variantes Guardadas", DTOutput("savedVariantsTable")),
tabPanel("Análisis de BAM", DTOutput("bamTable"), verbatimTextOutput("bamSummary"))
)
)
)
)
server <- function(input, output, session) {
variantes <- reactiveVal(NULL)
saved_variants <- reactiveVal(data.frame())
bam_data <- reactiveVal(NULL)
bam_summary <- reactiveVal(NULL)
observeEvent(input$loadData, {
req(input$file1)
vcf_file <- input$file1$datapath
genome <- "GRCh38"
vcf <- readVcf(vcf_file, genome)
variantes_df <- data.frame(
chromosome = seqnames(rowRanges(vcf)),
start = start(rowRanges(vcf)),
end = end(rowRanges(vcf)),
ref = ref(vcf),
alt = sapply(alt(vcf), function(x) paste(x, collapse = "/")),
id = rownames(info(vcf))
)
variantes(variantes_df)
})
observeEvent(input$loadBam, {
req(input$bamFile)
bam_file <- input$bamFile$datapath
indexBam(bam_file)
alineaciones <- scanBam(bam_file)
bam_data(alineaciones)
# Ejemplo de resumen simple
param <- ScanBamParam(which=GRanges("chr1", IRanges(1, 1e6)))
conteos <- countBam(bam_file, param=param)
bam_summary(conteos)
})
output$variantsTable <- renderDT({
req(variantes())
datatable(variantes(), selection = "single", options = list(pageLength = 10))
})
observeEvent(input$variantsTable_rows_selected, {
selected_row <- input$variantsTable_rows_selected
if (length(selected_row) == 1) {
variant_id <- variantes()[selected_row, "id"]
info <- fetch_clinvar_info(variant_id)
if (!is.null(info)) {
info_text <- paste(
"UID: ", info$uid, "\n",
"Object Type: ", info$obj_type, "\n",
"Accession: ", info$accession, "\n",
"Accession Version: ", info$accession_version, "\n",
"Title: ", info$title, "\n",
"Variation Name: ", info$variation_name, "\n",
"cDNA Change: ", info$cdna_change, "\n",
"Variant Type: ", info$variant_type, "\n",
"Germline Description: ", info$germline_classification$description, "\n",
"Clinical Impact Description: ", info$clinical_impact_classification$description, "\n",
"Oncogenicity Description: ", info$oncogenicity_classification$description, "\n",
"Gene Symbol: ", info$genes$symbol, "\n",
"Molecular Consequence: ", paste(info$molecular_consequence_list, collapse = ", "), "\n",
"Protein Change: ", info$protein_change, "\n",
sep = ""
)
output$variantInfo <- renderText({ info_text })
# Generar el enlace a la búsqueda en Google Scholar para la variante
google_scholar_url <- paste0("https://scholar.google.com/scholar?q=", "genetic variant ", variant_id)
output$externalLink <- renderUI({
tags$a(href = google_scholar_url, target = "_blank", "Buscar en Google Scholar")
})
# Extraer la información de ClinVar y agregarla a la variante seleccionada
clinvar_info <- extract_clinvar_info(info)
new_saved_variant <- cbind(variantes()[selected_row, ], clinvar_info)
saved_variants(rbind(saved_variants(), new_saved_variant))
} else {
output$variantInfo <- renderText({ "No se encontró información para esta variante." })
output$externalLink <- renderUI({ NULL })
}
}
})
output$savedVariantsTable <- renderDT({
datatable(saved_variants(), options = list(pageLength = 10))
})
output$bamTable <- renderDT({
req(bam_data())
datatable(bam_data(), options = list(pageLength = 10))
})
output$bamSummary <- renderText({
req(bam_summary())
paste("Total alignments in the specified region: ", bam_summary()$records)
})
}
shinyApp(ui = ui, server = server)
runApp('Documentos/R/TFM/Beta/código en R/Proyecto')
